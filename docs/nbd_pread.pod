=head1 NAME

nbd_pread - read from the NBD server

=head1 SYNOPSIS

 #include <libnbd.h>

 int nbd_pread (
       struct nbd_handle *h, void *buf, size_t count,
       uint64_t offset, uint32_t flags
     );

=head1 DESCRIPTION

Issue a read command to the NBD server for the range starting
at C<offset> and ending at C<offset> + C<count> - 1.  NBD
can only read all or nothing using this call.  The call
returns when the data has been read fully into C<buf> or there is an
error.  See also L<nbd_pread_structured(3)>, if finer visibility is
required into the server's replies, or if you want to use
C<LIBNBD_CMD_FLAG_DF>.

Note that libnbd currently enforces a maximum read buffer of 64MiB,
even if the server would permit a larger buffer in a single transaction;
attempts to exceed this will result in an C<ERANGE> error.  The server
may enforce a smaller limit, which can be learned with
L<nbd_get_block_size(3)>.

The C<flags> parameter must be C<0> for now (it exists for future NBD
protocol extensions).

Note that if this command fails, and L<nbd_get_pread_initialize(3)>
returns true, then libnbd sanitized C<buf>, but it is unspecified
whether the contents of C<buf> will read as zero or as partial results
from the server.  If L<nbd_get_pread_initialize(3)> returns false,
then libnbd did not sanitize C<buf>, and the contents are undefined
on failure.

By default, libnbd will reject attempts to use this function with
parameters that are likely to result in server failure, such as
requesting an unknown command flag.  The L<nbd_set_strict_mode(3)>
function can be used to alter which scenarios should await a server
reply rather than failing fast.

=head1 RETURN VALUE

If the call is successful the function returns C<0>.

=head1 ERRORS

On error C<-1> is returned.

Refer to L<libnbd(3)/ERROR HANDLING>
for how to get further details of the error.

The following parameters must not be NULL: C<h>, C<buf>.
For more information see L<libnbd(3)/Non-NULL parameters>.

=head1 HANDLE STATE

The handle must be
connected with the server,
otherwise this call will return an error.

=head1 VERSION

This function first appeared in libnbd 1.0.

If you need to test if this function is available at compile time
check if the following macro is defined:

 #define LIBNBD_HAVE_NBD_PREAD 1

=head1 EXAMPLE

This example is also available as F<examples/fetch-first-sector.c>
in the libnbd source code.

 /* This example shows how to connect to an NBD server
  * and fetch and print the first sector (usually the
  * boot sector or partition table or filesystem
  * superblock).
  *
  * You can test it with nbdkit like this:
  *
  * nbdkit -U - floppy . \
  *   --run './fetch-first-sector $unixsocket'
  *
  * The nbdkit floppy plugin creates an MBR disk so the
  * first sector is the partition table.
  */

 #include <stdio.h>
 #include <stdlib.h>

 #include <libnbd.h>

 int
 main (int argc, char *argv[])
 {
   struct nbd_handle *nbd;
   char buf[512];
   FILE *pp;

   if (argc != 2) {
     fprintf (stderr, "%s socket\n", argv[0]);
     exit (EXIT_FAILURE);
   }

   /* Create the libnbd handle. */
   nbd = nbd_create ();
   if (nbd == NULL) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }

   /* Connect to the NBD server over a
    * Unix domain socket.
    */
   if (nbd_connect_unix (nbd, argv[1]) == -1) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }

   /* Read the first sector synchronously. */
   if (nbd_pread (nbd, buf, sizeof buf, 0, 0) == -1) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }

   /* Close the libnbd handle. */
   nbd_close (nbd);

   /* Print the first sector. */
   pp = popen ("hexdump -C", "w");
   if (pp == NULL) {
     perror ("popen: hexdump");
     exit (EXIT_FAILURE);
   }
   fwrite (buf, sizeof buf, 1, pp);
   pclose (pp);

   exit (EXIT_SUCCESS);
 }

=head1 SEE ALSO

L<nbd_aio_pread(3)>,
L<nbd_create(3)>,
L<nbd_get_block_size(3)>,
L<nbd_get_pread_initialize(3)>,
L<nbd_pread_structured(3)>,
L<nbd_set_pread_initialize(3)>,
L<nbd_set_strict_mode(3)>,
L<libnbd(3)>.

=head1 AUTHORS

Eric Blake

Richard W.M. Jones

=head1 COPYRIGHT

Copyright Red Hat
