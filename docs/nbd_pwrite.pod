=head1 NAME

nbd_pwrite - write to the NBD server

=head1 SYNOPSIS

 #include <libnbd.h>

 int nbd_pwrite (
       struct nbd_handle *h, const void *buf, size_t count,
       uint64_t offset, uint32_t flags
     );

=head1 DESCRIPTION

Issue a write command to the NBD server, writing the data in
C<buf> to the range starting at C<offset> and ending at
C<offset> + C<count> - 1.  NBD can only write all or nothing
using this call.  The call returns when the command has been
acknowledged by the server, or there is an error.  Note this will
generally return an error if L<nbd_is_read_only(3)> is true.

Note that libnbd defaults to enforcing a maximum write buffer
of the lesser of 64MiB or any maximum payload size advertised
by the server; attempts to exceed this will generally result in
a client-side C<ERANGE> error, rather than a server-side
disconnection.  The actual limit can be learned with
L<nbd_get_block_size(3)>.

The C<flags> parameter may be C<0> for no flags, or may contain
C<LIBNBD_CMD_FLAG_FUA> meaning that the server should not
return until the data has been committed to permanent storage
(if that is supported - some servers cannot do this, see
L<nbd_can_fua(3)>).  For convenience, unless C<nbd_set_strict_flags(3)>
was used to disable C<LIBNBD_STRICT_AUTO_FLAG>, libnbd ignores the
presence or absence of the flag C<LIBNBD_CMD_FLAG_PAYLOAD_LEN>
in C<flags>, while correctly using the flag over the wire
according to whether extended headers were negotiated.

By default, libnbd will reject attempts to use this function with
parameters that are likely to result in server failure, such as
requesting an unknown command flag.  The L<nbd_set_strict_mode(3)>
function can be used to alter which scenarios should await a server
reply rather than failing fast.

=head1 RETURN VALUE

If the call is successful the function returns C<0>.

=head1 ERRORS

On error C<-1> is returned.

Refer to L<libnbd(3)/ERROR HANDLING>
for how to get further details of the error.

The following parameters must not be NULL: C<h>, C<buf>.
For more information see L<libnbd(3)/Non-NULL parameters>.

=head1 HANDLE STATE

The handle must be
connected with the server,
otherwise this call will return an error.

=head1 VERSION

This function first appeared in libnbd 1.0.

If you need to test if this function is available at compile time
check if the following macro is defined:

 #define LIBNBD_HAVE_NBD_PWRITE 1

=head1 EXAMPLE

This example is also available as F<examples/reads-and-writes.c>
in the libnbd source code.

 /* This example shows how to do synchronous reads
  * and writes randomly over the first megabyte of an
  * NBD server.  Note this will destroy any existing
  * content on the NBD server.
  *
  * To test it with nbdkit and a RAM disk:
  *
  * nbdkit -U - memory 1M \
  *     --run './simple-reads-and-writes $unixsocket'
  */

 #include <stdio.h>
 #include <stdlib.h>
 #include <inttypes.h>
 #include <assert.h>
 #include <time.h>

 #include <libnbd.h>

 int
 main (int argc, char *argv[])
 {
   struct nbd_handle *nbd;
   char buf[512];
   size_t i;
   int64_t exportsize;
   uint64_t offset;

   srand (time (NULL));

   if (argc != 2) {
     fprintf (stderr, "%s socket\n", argv[0]);
     exit (EXIT_FAILURE);
   }

   /* Create the libnbd handle. */
   nbd = nbd_create ();
   if (nbd == NULL) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }

   /* Connect to the NBD server over a
    * Unix domain socket.
    */
   if (nbd_connect_unix (nbd, argv[1]) == -1) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }

   /* Get the size of the disk and check
    * it's large enough.
    */
   exportsize = nbd_get_size (nbd);
   if (exportsize == -1) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }
   assert (exportsize >= sizeof buf);

   /* Check that the server is writable. */
   if (nbd_is_read_only (nbd) == 1) {
     fprintf (stderr, "%s: "
              "error: this NBD export is read-only\n",
              argv[0]);
     exit (EXIT_FAILURE);
   }

   for (i = 0; i < sizeof buf; ++i)
     buf[i] = rand ();

   /* 1000 writes. */
   for (i = 0; i < 1000; ++i) {
     offset = rand () % (exportsize - sizeof buf);

     if (nbd_pwrite (nbd, buf, sizeof buf,
                     offset, 0) == -1) {
       fprintf (stderr, "%s\n", nbd_get_error ());
       exit (EXIT_FAILURE);
     }
   }

   /* 1000 reads and writes. */
   for (i = 0; i < 1000; ++i) {
     offset = rand () % (exportsize - sizeof buf);
     if (nbd_pread (nbd, buf, sizeof buf,
                    offset, 0) == -1) {
       fprintf (stderr, "%s\n", nbd_get_error ());
       exit (EXIT_FAILURE);
     }

     offset = rand () % (exportsize - sizeof buf);
     if (nbd_pwrite (nbd, buf, sizeof buf,
                     offset, 0) == -1) {
       fprintf (stderr, "%s\n", nbd_get_error ());
       exit (EXIT_FAILURE);
     }
   }

   /* Sends a graceful shutdown to the server. */
   if (nbd_shutdown (nbd, 0) == -1) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }

   nbd_close (nbd);

   exit (EXIT_SUCCESS);
 }

=head1 SEE ALSO

L<nbd_aio_pwrite(3)>,
L<nbd_can_fua(3)>,
L<nbd_create(3)>,
L<nbd_get_block_size(3)>,
L<nbd_is_read_only(3)>,
L<nbd_set_strict_mode(3)>,
L<libnbd(3)>.

=head1 AUTHORS

Eric Blake

Richard W.M. Jones

=head1 COPYRIGHT

Copyright Red Hat
