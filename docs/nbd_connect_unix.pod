=head1 NAME

nbd_connect_unix - connect to NBD server over a Unix domain socket

=head1 SYNOPSIS

 #include <libnbd.h>

 int nbd_connect_unix (
       struct nbd_handle *h, const char *unixsocket
     );

=head1 DESCRIPTION

Connect (synchronously) over the named Unix domain socket (C<unixsocket>)
to an NBD server running on the same machine.


This call returns when the connection has been made.  By default,
this proceeds all the way to transmission phase, but
L<nbd_set_opt_mode(3)> can be used for manual control over
option negotiation performed before transmission phase.

=head1 RETURN VALUE

If the call is successful the function returns C<0>.

=head1 ERRORS

On error C<-1> is returned.

Refer to L<libnbd(3)/ERROR HANDLING>
for how to get further details of the error.

The following parameters must not be NULL: C<h>, C<unixsocket>.
For more information see L<libnbd(3)/Non-NULL parameters>.

=head1 HANDLE STATE

The handle must be
newly created,
otherwise this call will return an error.

=head1 VERSION

This function first appeared in libnbd 1.0.

If you need to test if this function is available at compile time
check if the following macro is defined:

 #define LIBNBD_HAVE_NBD_CONNECT_UNIX 1

=head1 EXAMPLE

This example is also available as F<examples/fetch-first-sector.c>
in the libnbd source code.

 /* This example shows how to connect to an NBD server
  * and fetch and print the first sector (usually the
  * boot sector or partition table or filesystem
  * superblock).
  *
  * You can test it with nbdkit like this:
  *
  * nbdkit -U - floppy . \
  *   --run './fetch-first-sector $unixsocket'
  *
  * The nbdkit floppy plugin creates an MBR disk so the
  * first sector is the partition table.
  */

 #include <stdio.h>
 #include <stdlib.h>

 #include <libnbd.h>

 int
 main (int argc, char *argv[])
 {
   struct nbd_handle *nbd;
   char buf[512];
   FILE *pp;

   if (argc != 2) {
     fprintf (stderr, "%s socket\n", argv[0]);
     exit (EXIT_FAILURE);
   }

   /* Create the libnbd handle. */
   nbd = nbd_create ();
   if (nbd == NULL) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }

   /* Connect to the NBD server over a
    * Unix domain socket.
    */
   if (nbd_connect_unix (nbd, argv[1]) == -1) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }

   /* Read the first sector synchronously. */
   if (nbd_pread (nbd, buf, sizeof buf, 0, 0) == -1) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }

   /* Close the libnbd handle. */
   nbd_close (nbd);

   /* Print the first sector. */
   pp = popen ("hexdump -C", "w");
   if (pp == NULL) {
     perror ("popen: hexdump");
     exit (EXIT_FAILURE);
   }
   fwrite (buf, sizeof buf, 1, pp);
   pclose (pp);

   exit (EXIT_SUCCESS);
 }

=head1 SEE ALSO

L<nbd_aio_connect_unix(3)>,
L<nbd_create(3)>,
L<nbd_set_opt_mode(3)>,
L<libnbd(3)>.

=head1 AUTHORS

Eric Blake

Richard W.M. Jones

=head1 COPYRIGHT

Copyright Red Hat
