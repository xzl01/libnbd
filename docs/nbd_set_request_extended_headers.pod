=head1 NAME

nbd_set_request_extended_headers - control use of extended headers

=head1 SYNOPSIS

 #include <libnbd.h>

 int nbd_set_request_extended_headers (
       struct nbd_handle *h, bool request
     );

=head1 DESCRIPTION

By default, libnbd tries to negotiate extended headers with the
server, as this protocol extension permits the use of 64-bit
zero, trim, and block status actions.  However,
for integration testing, it can be useful to clear this flag
rather than find a way to alter the server to fail the negotiation
request.

For backwards compatibility, the setting of this knob is ignored
if L<nbd_set_request_structured_replies(3)> is also set to false,
since the use of extended headers implies structured replies.

=head1 RETURN VALUE

If the call is successful the function returns C<0>.

=head1 ERRORS

On error C<-1> is returned.

Refer to L<libnbd(3)/ERROR HANDLING>
for how to get further details of the error.

The following parameters must not be NULL: C<h>.
For more information see L<libnbd(3)/Non-NULL parameters>.

=head1 HANDLE STATE

The handle must be
newly created,
otherwise this call will return an error.

=head1 VERSION

This function first appeared in libnbd 1.18.

If you need to test if this function is available at compile time
check if the following macro is defined:

 #define LIBNBD_HAVE_NBD_SET_REQUEST_EXTENDED_HEADERS 1

=head1 SEE ALSO

L<nbd_block_status_64(3)>,
L<nbd_cache(3)>,
L<nbd_create(3)>,
L<nbd_get_extended_headers_negotiated(3)>,
L<nbd_get_request_extended_headers(3)>,
L<nbd_opt_extended_headers(3)>,
L<nbd_set_handshake_flags(3)>,
L<nbd_set_request_structured_replies(3)>,
L<nbd_set_strict_mode(3)>,
L<nbd_trim(3)>,
L<nbd_zero(3)>,
L<libnbd(3)>.

=head1 AUTHORS

Eric Blake

Richard W.M. Jones

=head1 COPYRIGHT

Copyright Red Hat
