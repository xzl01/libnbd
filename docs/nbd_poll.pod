=head1 NAME

nbd_poll - poll the handle once

=head1 SYNOPSIS

 #include <libnbd.h>

 int nbd_poll (
       struct nbd_handle *h, int timeout
     );

=head1 DESCRIPTION

This is a simple implementation of L<poll(2)> which is used
internally by synchronous API calls.  On success, it returns
C<0> if the C<timeout> (in milliseconds) occurs, or C<1> if
the poll completed and the state machine progressed. Set
C<timeout> to C<-1> to block indefinitely (but be careful
that eventual action is actually expected - for example, if
the connection is established but there are no commands in
flight, using an infinite timeout will permanently block).

This function is mainly useful as an example of how you might
integrate libnbd with your own main loop, rather than being
intended as something you would use.

=head1 RETURN VALUE

This call returns an integer E<ge> C<0>.

=head1 ERRORS

On error C<-1> is returned.

Refer to L<libnbd(3)/ERROR HANDLING>
for how to get further details of the error.

The following parameters must not be NULL: C<h>.
For more information see L<libnbd(3)/Non-NULL parameters>.

=head1 VERSION

This function first appeared in libnbd 1.0.

If you need to test if this function is available at compile time
check if the following macro is defined:

 #define LIBNBD_HAVE_NBD_POLL 1

=head1 EXAMPLE

This example is also available as F<examples/aio-connect-read.c>
in the libnbd source code.

 /* This example shows how to use the AIO (asynchronous) low
  * level API to connect to a server and read the disk.
  *
  * Here are a few ways to try this example:
  *
  * nbdkit -U - linuxdisk . \
  *   --run './aio-connect-read $unixsocket'
  *
  * nbdkit -U - floppy . \
  *   --run './aio-connect-read $unixsocket'
  *
  * nbdkit -U - pattern size=1M \
  *   --run './aio-connect-read $unixsocket'
  */

 #include <stdio.h>
 #include <stdlib.h>
 #include <stdint.h>
 #include <inttypes.h>
 #include <errno.h>
 #include <assert.h>

 #include <libnbd.h>

 #define NR_SECTORS 32
 #define SECTOR_SIZE 512

 struct data {
   uint64_t offset;
   char sector[SECTOR_SIZE];
 };

 static int
 hexdump (void *user_data, int *error)
 {
   struct data *data = user_data;
   FILE *pp;

   if (*error) {
     errno = *error;
     perror ("failed to read");
     exit (EXIT_FAILURE);
   }

   printf ("sector at offset 0x%" PRIx64 ":\n",
           data->offset);
   pp = popen ("hexdump -C", "w");
   if (pp == NULL) {
     perror ("popen: hexdump");
     exit (EXIT_FAILURE);
   }
   fwrite (data->sector, SECTOR_SIZE, 1, pp);
   pclose (pp);
   printf ("\n");

   /* Returning 1 from the callback automatically retires
    * the command.
    */
   return 1;
 }

 static struct data data[NR_SECTORS];

 int
 main (int argc, char *argv[])
 {
   struct nbd_handle *nbd;
   size_t i;

   if (argc != 2) {
     fprintf (stderr, "%s socket\n", argv[0]);
     exit (EXIT_FAILURE);
   }

   /* Create the libnbd handle. */
   nbd = nbd_create ();
   if (nbd == NULL) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }

   /* Connect to the NBD server over a Unix domain socket.
    * This only starts the connection.
    */
   if (nbd_aio_connect_unix (nbd, argv[1]) == -1) {
     fprintf (stderr, "%s\n", nbd_get_error ());
     exit (EXIT_FAILURE);
   }

   /* Wait for the connection to complete.  The use of
    * nbd_poll here is only as an example.  You could also
    * integrate this with poll(2), glib or another main
    * loop.  Read libnbd(3) and the source file lib/poll.c.
    */
   while (!nbd_aio_is_ready (nbd)) {
     if (nbd_poll (nbd, -1) == -1) {
       fprintf (stderr, "%s\n", nbd_get_error ());
       exit (EXIT_FAILURE);
     }
   }

   assert (nbd_get_size (nbd) >= NR_SECTORS * SECTOR_SIZE);

   /* Issue read commands for the first NR sectors. */
   for (i = 0; i < NR_SECTORS; ++i) {
     data[i].offset = i * SECTOR_SIZE;

     /* The callback (hexdump) is called when the command
      * completes.  The buffer must continue to exist while
      * the command is running.
      */
     if (nbd_aio_pread (nbd, data[i].sector, SECTOR_SIZE,
                        data[i].offset,
                        (nbd_completion_callback) {
                          .callback = hexdump,
                          .user_data = &data[i],
                        }, 0) == -1) {
       fprintf (stderr, "%s\n", nbd_get_error ());
       exit (EXIT_FAILURE);
     }
   }

   /* Run the main loop until all the commands have
    * completed and retired.  Again the use of nbd_poll
    * here is only as an example.
    */
   while (nbd_aio_in_flight (nbd) > 0) {
     if (nbd_poll (nbd, -1) == -1) {
       fprintf (stderr, "%s\n", nbd_get_error ());
       exit (EXIT_FAILURE);
     }
   }

   /* Close the libnbd handle. */
   nbd_close (nbd);

   exit (EXIT_SUCCESS);
 }

=head1 SEE ALSO

L<nbd_create(3)>,
L<nbd_poll2(3)>,
L<libnbd(3)>,
L<poll(2)>.

=head1 AUTHORS

Eric Blake

Richard W.M. Jones

=head1 COPYRIGHT

Copyright Red Hat
